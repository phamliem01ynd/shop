const {
  getCategoryService,
  createProductService,
  getProductService,
  deleteProductService,
  createCategoryService,
  deleteCategoryService,
  updateProductService,
  search_PaginatorProductService,
  getFindProductService,
} = require("../service/ProductService");
const db = require("../models/index");
const { Op } = require("sequelize");
const multer = require("multer");
const cloudinary = require("cloudinary").v2;
require("dotenv").config();

cloudinary.config({
  cloud_name: process.env.CLOUD_NAME,
  api_key: process.env.API_KEY,
  api_secret: process.env.API_SECRET,
  secure: true,
});

const storage = multer.memoryStorage();
const fileFilter = (req, file, cb) => {
  if (file.mimetype.startsWith("image/")) {
    cb(null, true);
  } else {
    cb(new Error("Ch·ªâ ƒë∆∞·ª£c ph√©p upload file ·∫£nh!"), false);
  }
};

const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: { fileSize: 5 * 1024 * 1024 },
});

const uploadImage = async (req, res) => {
  try {
    if (!req.file) {
      // S·ª≠a l·∫°i message r√µ h∆°n
      return res.status(400).json({ message: "Vui l√≤ng upload ·∫£nh s·∫£n ph·∫©m!" });
    } else {
      const b64 = Buffer.from(req.file.buffer).toString("base64");
      let dataURL = "data:" + req.file.mimetype + ";base64," + b64;
      const cloudinaryResult = await cloudinary.uploader.upload(dataURL, {
        resource_type: "auto",
        folder: "products",
      });

      const {
        name,
        price,
        description,
        category_id,
        status,
        discount,
        quantity, // Gi·ªØ l·∫°i n·∫øu frontend g·ª≠i JSON string
        // B·ªè sold kh·ªèi ƒë√¢y
      } = req.body;

      const newProductData = {
        name: name,
        price: parseFloat(price),
        description: description,
        category_id: parseInt(category_id),
        status: parseInt(status),
        discount: parseFloat(discount),
        quantity: JSON.parse(quantity), // Gi·∫£ ƒë·ªãnh frontend g·ª≠i JSON string
        sold: 0, // Kh·ªüi t·∫°o sold = 0
        image: cloudinaryResult.secure_url,
      };

      const result = await db.Product.create(newProductData);

      // ----> TH√äM RESPONSE KHI TH√ÄNH C√îNG <----
      res.status(201).json(result); // G·ª≠i l·∫°i s·∫£n ph·∫©m v·ª´a t·∫°o v·ªõi status 201 Created
    } // ƒê√≥ng kh·ªëi else
  } catch (error) {
    console.error("Error creating product with image:", error);
    if (
      error.http_code === 400 &&
      error.message.includes("Invalid image file")
    ) {
      return res.status(400).json({ message: "File ·∫£nh kh√¥ng h·ª£p l·ªá." });
    }
    // B·∫Øt l·ªói JSON.parse n·∫øu quantity kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng
    if (error instanceof SyntaxError && error.message.includes("JSON.parse")) {
      return res
        .status(400)
        .json({ message: "D·ªØ li·ªáu quantity kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON." });
    }
    res
      .status(500)
      .json({ message: "L·ªói server khi t·∫°o s·∫£n ph·∫©m", error: error.message });
  }
};

const getCategory = async (req, res) => {
  try {
    const category = await getCategoryService();
    res.status(200).json(category);
  } catch (error) {
    res.status(500).json({ message: "Internal Server Error" });
  }
};

const getProduct = async (req, res) => {
  try {
    const product = await getProductService();
    console.log("req.user >>>: ", req.user);
    res.status(200).json(product);
  } catch (error) {
    res.status(500).json({ message: "Internal Server Error" });
  }
};

const createProduct = async (req, res) => {
  try {
    const { name, image, quantity, category_id, description, price, discount } =
      req.body;
    const result = await createProductService(
      name,
      image,
      quantity,
      category_id,
      description,
      price,
      discount
    );
    res.status(201).json(result);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói t·∫°o s·∫£n ph·∫©m" });
  }
};

const createCategory = async (req, res) => {
  try {
    const { name, description, image } = req.body;
    const result = await createCategoryService(name, description, image);
    res.status(200).json(result);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói th√™m danh m·ª•c" });
  }
};

const deleteProduct = async (req, res) => {
  try {
    const result = await deleteProductService(req.params.id);
    res.status(200).json(result);
  } catch (error) {
    res.status(500).json({ message: "loi khi xoa san pham" });
  }
};

const deleteCategory = async (req, res) => {
  try {
    const result = await deleteCategoryService(req.params.id);
    res.status(200).json(result);
  } catch (error) {
    res.status(500).json({ message: "loi khi xoa san pham" });
  }
};

const createImage = async (req, res) => {
  try {
    const { file } = req.body;
    const result = await createImageService(file);
    res.status(201).json(result);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói t·∫°o ·∫£nh" });
  }
};
const updateProduct = async (req, res) => {
  try {
    const result = await updateProductService(req.params.id, req.body);
    if (result.success) {
      res.status(200).json(result);
    } else {
      res.status(400).json(result);
    }
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m" });
  }
};

// B√™n trong controller search_PaginatorProduct
const search_PaginatorProduct = async (req, res) => {
  try {
    console.log("Backend received query params:", req.query); // Log tham s·ªë nh·∫≠n ƒë∆∞·ª£c
    const products = await search_PaginatorProductService(req.query);
    console.log("Backend service returned:", products); // Log k·∫øt qu·∫£ service tr·∫£ v·ªÅ
    res.status(200).json(products);
  } catch (error) {
    // Log th√™m l·ªói ·ªü ƒë√¢y n·∫øu mu·ªën
    console.error(
      "Error in search_PaginatorProduct controller:",
      error.message
    );
    res.status(500).json({ message: "L·ªói khi tim kiem s·∫£n ph·∫©m" });
  }
};

const getFindProduct = async (req, res) => {
  try {
    const id = req.query.id || ""; // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ query params

    if (!id) {
      return res.status(400).json({ message: "Thi·∫øu tham s·ªë t√¨m ki·∫øm 'id'" });
    }

    console.log("üîç Search Query:", id); // Ki·ªÉm tra t·ª´ kh√≥a t√¨m ki·∫øm

    const products = await db.Product.findOne({
      where: {
        // ƒêi·ªÅu ki·ªán: c·ªôt 'id' ph·∫£i b·∫±ng ch√≠nh x√°c gi√° tr·ªã productId
        id: id,
      },
    });

    res.status(200).json(products);
  } catch (error) {
    console.error("‚ùå L·ªói t√¨m ki·∫øm:", error);
    res.status(500).json({ message: "L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m", error });
    throw error;
  }
};

const searchProduct = async (req, res) => {
  try {
    const search = req.query.search || ""; // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ query params

    // if (!search) {
    //   return res
    //     .status(400)
    //     .json({ message: "Thi·∫øu tham s·ªë t√¨m ki·∫øm 'search'" });
    // }

    // console.log("üîç Search Query:", search); 

    const products = await db.Product.findAll({
      where: {
        name: { [Op.like]: `%${search}%` }, // ‚úÖ ƒê·ªïi 'title' th√†nh 'name'
      },
    });

    res.status(200).json(products);
  } catch (error) {
    console.error("‚ùå L·ªói t√¨m ki·∫øm:", error);
    res.status(500).json({ message: "L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m", error });
    throw error;  
  }
};

module.exports = {
  getCategory,
  createProduct,
  getProduct,
  deleteProduct,
  createImage,
  deleteCategory,
  createCategory,
  updateProduct,
  search_PaginatorProduct,
  searchProduct,
  getFindProduct,
  upload,
  uploadImage,
};
